# -*- coding: utf-8 -*-
"""TinyTerribleSudoku.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16PEm870ZPGKxhIRGQjCK2E2im_HoC8Yq
"""

import random

def print_grid(grid, highlight=None):
    """Print the 4x4 grid with formatting"""
    print("\n   1 2   3 4")
    print(" +-----+-----+")
    for i in range(4):
        row = f"{i+1}| "
        for j in range(4):
            # Highlight the current empty square
            if highlight and highlight == (i, j) and grid[i][j] == 0:
                cell = "[.]"
            else:
                cell = f" {grid[i][j]} " if grid[i][j] != 0 else " . "
            row += cell
            # Add vertical separator
            if j == 1:
                row += "|"
        row += "|"
        print(row)
        if i == 1:
            print(" +-----+-----+")
    print(" +-----+-----+")

def is_valid(grid, row, col, num):
    """Check if a number can be placed at (row,col)"""
    # Check row and column
    if num in grid[row] or num in [grid[i][col] for i in range(4)]:
        return False
    # Check 2x2 box
    box_row, box_col = 2 * (row // 2), 2 * (col // 2)
    for i in range(box_row, box_row + 2):
        for j in range(box_col, box_col + 2):
            if grid[i][j] == num:
                return False
    return True

def solve(grid):
    """Backtracking solver"""
    for row in range(4):
        for col in range(4):
            if grid[row][col] == 0:
                for num in range(1, 5):
                    if is_valid(grid, row, col, num):
                        grid[row][col] = num
                        if solve(grid):
                            return True
                        grid[row][col] = 0
                return False
    return True

def generate_puzzle():
    """Generate puzzle with exactly 3 empty squares"""
    while True:
        # Create solved grid
        grid = [[0]*4 for _ in range(4)]
        solve(grid)

        # Remove exactly 3 numbers
        puzzle = [row.copy() for row in grid]
        positions = [(i,j) for i in range(4) for j in range(4)]
        random.shuffle(positions)

        # Empty exactly 3 cells
        for k in range(3):
            i, j = positions[k]
            puzzle[i][j] = 0

        # Ensure unique solution
        temp_grid = [row.copy() for row in puzzle]
        if solve(temp_grid):
            return puzzle, grid

def play_game():
    """Interactive 4x4 Sudoku game"""
    puzzle, solution = generate_puzzle()
    grid = [row.copy() for row in puzzle]

    print("\nWelcome to 4Ã—4 Sudoku!")
    print("Enter a number (1-4) for the highlighted [.] square")
    print("Game ends when all squares are filled correctly\n")

    while True:
        # Find next empty cell
        empty_pos = None
        for i in range(4):
            for j in range(4):
                if grid[i][j] == 0:
                    empty_pos = (i, j)
                    break
            if empty_pos:
                break

        print_grid(grid, highlight=empty_pos)

        # Check if solved
        if grid == solution:
            print("\nCongratulations! You solved the puzzle!")
            break

        if not empty_pos:
            print("\nAll squares filled!")
            break

        try:
            num = int(input(f"Enter number (1-4) for row {empty_pos[0]+1}, column {empty_pos[1]+1}: "))

            if not 1 <= num <= 4:
                print("Please enter a number between 1-4")
                continue

            if is_valid(grid, empty_pos[0], empty_pos[1], num):
                grid[empty_pos[0]][empty_pos[1]] = num
            else:
                print(f"Invalid: {num} conflicts in row/column/box")

        except ValueError:
            print("Invalid input. Please enter a number 1-4")

if __name__ == "__main__":
    play_game()